<link
  href="/catalog/view/theme/default/stylesheet/easywebpush/webpush.css"
  type="text/css"
  rel="stylesheet"
/>
{{ custom_css }}
<div
  class="modal fade"
  id="easywebpush_subscription"
  tabindex="-1"
  role="dialog"
  aria-labelledby="subscription"
>
  <div class="modal-dialog" id="subscription_dialog" role="document"></div>
</div>

<div class="webpush_bell_wrapper out">
  <button class="webpush_bell" style="--bg-color:{{ primary_color }}">
    <i class="fa fa-bell" aria-hidden="true"></i>
    <span class="webpush_bell_overlay"></span>
  </button>
</div>

<script>
  const SUBSCRIBE_CONTENT = `
  <div class="modal-content">
    <div class="modal-body">
      <div class="media">
        <div class="media-left">
          <img
            class="media-object promot_logo"
            src="{{ prompt_logo }}"
            alt="{{ prompt_text }}"
          />
        </div>
        <div class="media-body">
          <p class="promot_text">{{ prompt_text }}</p>
        </div>
      </div>
    </div>
    <div class="modal-footer prompt-footer">
      <button class="btn btn-link btn-webpush-cancel" data-dismiss="modal">
        {{ button_cancel }}
      </button>
      <button
        class="btn btn-lg btn-webpush-primary"
        style="--bg-color:{{ primary_color }};"
        onclick="EasyWebpush.subscribe()"
        id="webpush_subscribe"
      >
        {{ button_subscribe }}
      </button>
    </div>
  </div>
    `;
  const UNSUBSCRIBE_CONTENT = `
  <div class="modal-content">
    <div class="modal-body">
      <div class="webpush-checked">
        <i class="fa fa-check-circle" aria-hidden="true"></i>
        <h2>{{text_already_subscribed_title}}</h2>
        <p>{{text_already_subscribed_subtitle}}</p>
      </div>
    </div>
    <div class="modal-footer prompt-footer">
      <button class="btn btn-link btn-webpush btn-webpush-cancel" onclick="EasyWebpush.unsubscribe()">
        <i class="fa fa-frown-o" aria-hidden="true"></i>
        {{ button_unsbscribe }}
      </button>
      <button
        class="btn btn-lg btn-webpush btn-webpush-primary"
        style="--bg-color:{{ primary_color }};"
        data-dismiss="modal"
      >
      <i class="fa fa-smile-o" aria-hidden="true"></i>
        {{ button_stay_subscribed }}
      </button>
    </div>
  </div>
    `;
  var EasyWebpush = {
    subscribed: false,
    bell: $(".webpush_bell"),
    modal: $("#easywebpush_subscription"),
    dialog: $("#subscription_dialog"),
    autoPromptStatus: Boolean(Number("{{ autoprompt_status }}")),
    autoPromptTimeout: undefined,
    bellStatus: Boolean(Number("{{ bell_status }}")),
    init: async function () {
      try {
        const register = await this.register();
        this.subscribed = await this.isSubscribed();
        this.postRegister();
      } catch (error) {
        console.log(error);
        // Show error snake? To be decided...
      }
    },
    register: async function () {
      if ("serviceWorker" in navigator) {
        try {
          const registration = await navigator.serviceWorker.register("/sw.js");
          console.log(
            `ServiceWorker registration successful with scope: ${registration.scope}`
          );
          return registration;
        } catch (error) {
          console.log("ServiceWorker registration failed: ", error);
          throw error;
        }
      } else {
        throw new Error("{{ error_browser_unsupported }}");
      }
    },
    postRegister: function () {
      this.modal.modal({ backdrop: false, show: false });
      this.modal.on("show.bs.modal", () => this.preShowDialog());
      this.modal.on("hide.bs.modal", () => this.postShowDialog());

      if (this.bellStatus) {
        this.showBell();
        this.bell.on("click", () => this.showDialog());
      }
      // Auto prompt dialog only if not subscribed
      if (this.autoPromptStatus && !this.subscribed) {
        this.initAutoPrompt();
      }
    },
    isSubscribed: async function () {
      try {
        if (Notification.permission === "denied") {
          console.warn(
            "Sorry: You've disabled notification permission manually, you may re-enable them in browser settings"
          );
          return false;
        }
        if (Notification.permission === "granted") {
          // make sure if granted but unsubscribed
          const registration = await navigator.serviceWorker.getRegistration();
          if (!registration) {
            return false;
          }
          const subscription = await registration.pushManager.getSubscription();
          if (!subscription) {
            return false;
          }
          const isRemoteSubscribed = await this.remoteIsSubscribed(
            subscription
          );
          return isRemoteSubscribed;
        }
        return false;
      } catch (error) {
        throw error;
      }
    },
    remoteIsSubscribed: async function (subscription) {
      return $.ajax({
        url: "index.php?route=extension/module/easywebpush/isSubscribed",
        type: "POST",
        cache: false,
        data: {
          subscription: JSON.stringify(subscription),
        },
        dataType: "json",
        beforeSend: () => {},
        complete: () => {},
        success: function (json) {
          return json;
        },
        error: function (err) {
          throw error;
        },
      });
    },
    subscribe: async function () {
      try {
        this.buttonLoading();
        await this.requestPermission();
        const serviceWorkerRegistration = await navigator.serviceWorker.ready;
        const subscription =
          await serviceWorkerRegistration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey:
              this.urlBase64ToUint8Array("{{ vapid_public }}"),
          });
        const remoteResult = await this.remoteSubscribe(subscription);
        if (remoteResult.success) {
          this.hideDialog();
          this.subscribed = true;
          // Clear timeout if subscribed before timeout finish
          if (this.autoPromptTimeout) {
            clearTimeout(this.autoPromptTimeout);
          }
        } else {
          throw new Error(remoteResult.error || "Unknown Error...!");
        }
      } catch (error) {
        this.displayModalError(error.message);
      } finally {
        this.buttonLoading(false);
      }
    },
    remoteSubscribe: async function (subscription) {
      return $.ajax({
        url: "index.php?route=extension/module/easywebpush/subscribe",
        type: "POST",
        cache: false,
        data: {
          subscription: JSON.stringify(subscription),
        },
        dataType: "json",
        success: function (json) {
          return json;
        },
        error: function (xhr, ajaxOptions, thrownError) {
          return thrownError;
        },
      });
    },
    unsubscribe: async function () {
      try {
        this.buttonLoading();
        const registration = await navigator.serviceWorker.ready;
        const subscription = await registration.pushManager.getSubscription();

        if (!subscription) {
          // No subscription registered
          console.warn("We did not detect previous registration in browser");
          return;
        }

        const serverUnsubscription = await this.remoteUnsubscribe(subscription);
        if (serverUnsubscription.success) {
          await subscription.unsubscribe();
          this.hideDialog();
          this.subscribed = false;
        } else {
          throw new Error(result.error || "Unknown Error...!");
        }
      } catch (error) {
        this.displayModalError(error.message);
      } finally {
        this.buttonLoading(false);
      }
    },
    remoteUnsubscribe: async function (subscription) {
      return $.ajax({
        url: "index.php?route=extension/module/easywebpush/unsubscribe",
        type: "POST",
        cache: false,
        data: {
          subscription: JSON.stringify(subscription),
        },
        dataType: "json",
        beforeSend: function () {},
        complete: function () {},
        success: function (json) {
          return json;
        },
        error: function (err) {
          console.log(thrownError, xhr.responseText);
          return thrownError;
        },
      });
    },
    checkSupport: function () {
      let supported = true;
      // Check support
      if (!("serviceWorker" in navigator)) {
        console.warn("Sorry: browser doesn't support servieworker");
        supported = false;
      }
      if (!("PushManager" in window)) {
        console.warn("Sorry: browser doesn't support webpush");
        supported = false;
      }
      if (!("showNotification" in ServiceWorkerRegistration.prototype)) {
        console.warn("Sorry: browser doesn't support showing webpush");
        supported = false;
      }
      if (!supported) {
        // this.disableSubscription();
      }
      return supported;
    },
    requestPermission: async function () {
      try {
        const hasSupport = this.checkSupport();
        if (!hasSupport) {
          throw new Error("{{ error_browser_unsupported }}");
        }
        if (Notification.permission === "denied") {
          throw new Error("{{ error_push_blocked }}");
        }
        if (Notification.permission === "granted") {
          return true;
        }
        if (Notification.permission === "default") {
          const result = await Notification.requestPermission();
          if (result !== "granted") {
            throw new Error("{{ error_push_blocked }}");
          }
          return true;
        }
      } catch (error) {
        throw error;
      }
    },
    initAutoPrompt: function () {
      const didCancel = localStorage.getItem("webpush_prompt");
      if (!didCancel) {
        return this.autoPrompt();
      }

      const reinitHours = Number("{{ autoprompt_reinit }}");
      const cancelled = new Date(didCancel);
      const reinitAfter = new Date(
        cancelled.setHours(cancelled.getHours() + reinitHours)
      );
      const current = new Date();
      if (current > reinitAfter) {
        this.autoPrompt();
      }
    },
    autoPrompt: function () {
      const delay = "{{ autoprompt_delay }}";
      clearTimeout(this.autoPromptTimeout || 0);
      this.autoPromptTimeout = setTimeout(() => {
        this.showDialog();
        // In auto prompt mode, keep posibility to scroll or click other elements
        $("body").removeClass("modal-open");
        $("body").css("padding-right", "unset");
        this.modal.css("bottom", "auto");
      }, delay);
    },
    showBell: function () {
      $(".webpush_bell_wrapper").removeClass("out");
      $(".webpush_bell_wrapper").addClass("in");
    },
    hideBell: function () {
      $(".webpush_bell_wrapper").removeClass("in");
      $(".webpush_bell_wrapper").addClass("out");
    },
    showDialog: function () {
      if (this.subscribed) {
        this.dialog.html(UNSUBSCRIBE_CONTENT);
      } else {
        this.dialog.html(SUBSCRIBE_CONTENT);
      }
      this.modal.modal("show");
    },
    hideDialog: function () {
      this.modal.modal("hide");
    },
    preShowDialog: function () {
      this.bell.html(`<div class="bell__spinner"></div>`);
    },
    postShowDialog: function () {
      this.bell.html(`
      <i class="fa fa-bell" aria-hidden="true"></i>
      <span class="webpush_bell_overlay"></span>
    `);

      if (this.autoPromptStatus) {
        localStorage.setItem("webpush_prompt", new Date().toISOString());
      }
    },
    buttonLoading: function (isLoading = true) {
      if (this.subscribed) {
        if (isLoading) {
          $(".btn-webpush-cancel").button("loading");
          $(".btn-webpush-primary").prop("disabled", true);
        } else {
          $(".btn-webpush-cancel").button("reset");
          $(".btn-webpush-primary").prop("disabled", false);
        }
      } else {
        if (isLoading) {
          $(".btn-webpush-primary").button("loading");
          $(".btn-webpush-cancel").prop("disabled", true);
        } else {
          $(".btn-webpush-primary").button("reset");
          $(".btn-webpush-cancel").prop("disabled", false);
        }
      }
    },
    displayModalError: function (msg) {
      this.dialog.find(".alert").remove();

      this.dialog.find(".modal-footer").after(`
      <div class="alert alert-danger" role="alert" style="margin:10px">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
        ${msg}
      </div>
        `);
    },
    urlBase64ToUint8Array: function (base64String) {
      const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
      const base64 = (base64String + padding)
        .replace(/\-/g, "+")
        .replace(/_/g, "/");
      const rawData = window.atob(base64);
      const outputArray = new Uint8Array(rawData.length);
      for (let i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
      }
      return outputArray;
    },
  };

  $(document).ready(function () {
    EasyWebpush.init();
  });
</script>
