<div
  class="ewp alert"
  role="alert"
  id="subscription_alert"
  style="display: none"
></div>

<script>
  const SUBSCRIBE_CONTENT = `
   	<button type="button" class="btn btn-warning btn-lg webpush_action"
     onclick="EasyWebpush.subscribe()"
     aria-label="{{ button_subscribe }}">
  	{{ button_subscribe }}
  </button>
  <p>
  	{{text_unsubscribed_alert}}
  </p>
     `;
  const UNSUBSCRIBE_CONTENT = `
   	<button type="button" class="btn btn-lg text-muted webpush_action"
     onclick="EasyWebpush.unsubscribe()"
     aria-label="{{ button_unsubscribe }}">
  	{{ button_unsubscribe }}
  </button>
  <p>
  	{{text_subscribed_alert}}
  </p>
     `;
  var EasyWebpush = {
    subscribed: false,
    alert: $("#subscription_alert"),
    init: async function () {
      try {
        const register = await this.register();
        this.subscribed = await this.isSubscribed();
        this.showBar();
      } catch (error) {
        this.displayError(error.meesage);
      }
    },
    showBar: function () {
      this.alert.removeClass("alert-warning");
      this.alert.removeClass("alert-success");

      if (!this.subscribed) {
        this.alert.addClass("alert-warning");
        this.alert.html(SUBSCRIBE_CONTENT);
      } else {
        this.alert.addClass("alert-success");
        this.alert.html(UNSUBSCRIBE_CONTENT);
      }
      this.alert.slideDown();
    },
    loading: function (status = true) {
      if (status) {
        $(".webpush_action").button("loading");
      } else {
        $(".webpush_action").button("reset");
      }
    },
    register: async function () {
      if ("serviceWorker" in navigator) {
        try {
          const registration = await navigator.serviceWorker.register("/sw.js");
          console.log(
            `ServiceWorker registration successful with scope: ${registration.scope}`
          );
          return registration;
        } catch (error) {
          console.log("ServiceWorker registration failed: ", error);
          throw error;
        }
      } else {
        this.displayError("{{ error_browser_unsupported }}");
      }
    },
    checkSupport: function () {
      let supported = true;
      //Check support
      if (!("serviceWorker" in navigator)) {
        console.warn("Sorry: browser doesn't support servieworker");
        supported = false;
      }
      if (!("PushManager" in window)) {
        console.warn("Sorry: browser doesn't support webpush");
        supported = false;
      }
      if (!("showNotification" in ServiceWorkerRegistration.prototype)) {
        console.warn("Sorry: browser doesn't support showing webpush");
        supported = false;
      }
      if (!supported) {
        // this.disableSubscription();
      }
      return supported;
    },
    requestPermission: async function () {
      try {
        const hasSupport = this.checkSupport();
        if (!hasSupport) {
          throw new Error("error_browser_unsupported");
        }
        if (Notification.permission === "denied") {
          throw new Error("error_push_blocked");
        }
        if (Notification.permission === "granted") {
          return true;
        }
        if (Notification.permission === "default") {
          const result = await Notification.requestPermission();
          if (result !== "granted") {
            throw new Error("error_push_blocked");
          }
          return true;
        }
      } catch (error) {
        throw error;
      }
    },
    isSubscribed: async function () {
      try {
        if (Notification.permission === "denied") {
          console.warn(
            "Sorry: You've disabled notification permission manually, you may re-enable them in browser settings"
          );
          return false;
        }
        if (Notification.permission === "granted") {
          //make sure if granted but unsubscribed
          const registration = await navigator.serviceWorker.getRegistration();
          if (!registration) {
            return false;
          }
          const subscription = await registration.pushManager.getSubscription();
          if (!subscription) {
            return false;
          }
          const isRemoteSubscribed = await this.remoteIsSubscribed(
            subscription
          );
          return isRemoteSubscribed;
        }
        return false;
      } catch (error) {
        throw error;
      }
    },
    subscribe: async function () {
      try {
        this.loading();
        await this.requestPermission();
        const serviceWorkerRegistration = await navigator.serviceWorker.ready;
        const subscription =
          await serviceWorkerRegistration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey:
              this.urlBase64ToUint8Array("{{vapid_public}}"),
          });
        const remoteResult = await this.remoteSubscribe(subscription);
        if (remoteResult.success) {
          this.subscribed = true;
          return this.showBar();
        } else if (remoteResult.error) {
          throw new Error(remoteResult.error);
        }
        throw new Error("{{error_subscription_failed}}");
      } catch (error) {
        this.displayError(error.message);
      } finally {
        this.loading(false);
      }
    },
    unsubscribe: async function () {
      try {
        this.loading();
        const registration = await navigator.serviceWorker.ready;
        const subscription = await registration.pushManager.getSubscription();

        if (!subscription) {
          //No subscription registered
          this.displayError(
            "We did not detect previous registration in browser"
          );
          return;
        }

        const serverUnsubscription = await this.remoteUnsubscribe(subscription);
        if (serverUnsubscription.success) {
          await subscription.unsubscribe();
          this.subscribed = false;
          return this.showBar();
        }
        return serverUnsubscription;
      } catch (error) {
        this.displayError(error.message);
      } finally {
        this.loading(false);
      }
    },
    remoteSubscribe: async function (subscription) {
      return $.ajax({
        url: "index.php?route=extension/module/easywebpush/dashboard/subscribe&user_token={{ user_token }}",
        type: "POST",
        cache: false,
        data: { subscription: JSON.stringify(subscription) },
        dataType: "json",
        success: function (json) {
          return json;
        },
        error: function (xhr, ajaxOptions, thrownError) {
          console.log(thrownError, xhr.responseText);
          return thrownError;
        },
      });
    },
    remoteUnsubscribe: async function (subscription) {
      return $.ajax({
        url: "index.php?route=extension/module/easywebpush/dashboard/unsubscribe&user_token={{ user_token }}",
        type: "POST",
        cache: false,
        data: { subscription: JSON.stringify(subscription) },
        dataType: "json",
        success: function (json) {
          return json;
        },
        error: function (err) {
          console.log(thrownError, xhr.responseText);
          return thrownError;
        },
      });
    },
    remoteIsSubscribed: async function (subscription) {
      return $.ajax({
        url: "index.php?route=extension/module/easywebpush/dashboard/isSubscribed&user_token={{ user_token }}",
        type: "POST",
        cache: false,
        data: { subscription: JSON.stringify(subscription) },
        dataType: "json",
        success: function (json) {
          return json;
        },
        error: function (err) {
          console.log(err);
        },
      });
    },
    urlBase64ToUint8Array: function (base64String) {
      const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
      const base64 = (base64String + padding)
        .replace(/\-/g, "+")
        .replace(/_/g, "/");
      const rawData = window.atob(base64);
      const outputArray = new Uint8Array(rawData.length);
      for (let i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
      }
      return outputArray;
    },
    displayError: function (msg) {
      this.alert.before(`
       <div class="alert alert-danger" role="alert" style="margin:2px 0">
         <button type="button" class="close" data-dismiss="alert" aria-label="Close">
           <span aria-hidden="true">&times;</span>
         </button>
         ${msg}
       </div>
         `);
    },
  };
  $(document).ready(function () {
    EasyWebpush.init();
  });
</script>
